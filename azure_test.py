import os
import pandas as pd
from openai import AzureOpenAI
from pdf_2_image import PDFConvert
from image_2_text import ImageConvert
import json
import re 
 

GRAPHRAG_LLM_DEPLOYMENT_NAME="gpt-4o" 
GRAPHRAG_LLM_API_KEY="7c90d344cb524b9885202a7603641589" 
GRAPHRAG_LLM_API_BASE="https://azure-isv-success-in.openai.azure.com/" 
GRAPHRAG_LLM_API_VERSION="2024-06-01"
 

# Initialize the Azure OpenAI client
api_base = "https://azure-isv-success-in.openai.azure.com/" 
api_key = "7c90d344cb524b9885202a7603641589"
deployment_name = "gpt-4o"
api_version = "2024-06-01"

client = AzureOpenAI(
    api_key=api_key,  
    api_version=api_version,
    base_url=f"{api_base}openai/deployments/{deployment_name}",
)


def process_text(pdf_path):
    """
    Processes the given PDF file, extracts text from the images, and generates JSON
    responses based on a system prompt using the Groq API.

    Parameters:
    ----------
    pdf_path : str
        The path to the PDF file that needs to be processed.
    
    system_prompt : str
        The system prompt used to guide the Groq API in generating JSON responses.

    Returns:
    -------
    str
        The processed JSON results generated by Groq based on the extracted text.
    """
    # Initialize the PDF to image converter and the image to text converter
    convert_pdf = PDFConvert()
    convert_image = ImageConvert()
    
    # Convert PDF to images and save them in a designated folder
    image_folder = 'extracted_images'
    image_paths = convert_pdf.convert_pdf_to_images(pdf_path, output_folder=image_folder)

    # Extract text from the generated images
    extracted_text = convert_image.extract_text_from_images(image_paths)
    with open(r'C:\Users\sys\Tika\image_processing_tessaract\extracted_text.txt', 'w') as file:
        for item in extracted_text:
            file.write(f"{item}\n") 

# Function to generate prompt for the LLM to identify column type
def generate_prompt():
    with open (r'C:\Users\sys\Tika\docs\prompts\sys_prompt_CBC.txt','r') as prompt:
        input_prompt = prompt.read()
        system_prompt = input_prompt
       ## system_prompt = "Assistant is a large language model trained by OpenAI. Summerize the user prompt and provide it in JSON format"
    with open (r'C:\Users\sys\Tika\image_processing_tessaract\extracted_text.txt','r') as file:
        input_text = file.read()
        user_prompt =input_text
    

    return system_prompt, user_prompt

# Read the CSV or Excel file
# file_path = "Olympic_Results.csv"  # Change this to your file path
# df = pd.read_csv(file_path)  # Use pd.read_excel(file_path) for Excel files

# # Iterate through each column and generate a prompt for the LLM
# for column_name in df.columns:
#     # Extract a sample of data from the column (first 5 rows)
#     column_data_sample = df[column_name].dropna().head(5).to_list()
    
#     # Convert sample data to a formatted string
#     column_data_sample_str = '\n'.join([f"{i+1}. \"{str(value)}\"" for i, value in enumerate(column_data_sample)])
    
## Extract Text from PDF files 
pdf_path = r'C:\Users\sys\Tika\docs\Haematology - CBC 3-10-24.pdf'
process_text(pdf_path)

# Generate the prompt for the current column
system_prompt, user_prompt = generate_prompt()

# Send the prompt to the OpenAI model
try:
    response = client.chat.completions.create(
        model=deployment_name,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt}
        ]
    )
    print(response.choices[0].message.content)
    with open(r'C:\Users\sys\Tika\image_processing_tessaract\results\Haematology.json', 'w') as file:
       file.write(response.choices[0].message.content) 

# Catch the general exception and inspect the error details
except Exception as e:
    # Convert the exception to a string to inspect the message
    error_message = str(e)
    
    # Check if the error message contains "400" or Bad Request information
    if '400' in error_message:
        print("Bad Request Error (400) and content Issue:")
    else:
        print("An error occurred:", error_message)

# Print the identified column type and the reasoning
# print(f"Column: {column_name}")

# print("-" * 50)